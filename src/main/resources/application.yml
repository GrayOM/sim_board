# Spring과 MySQL 을 연결 시키는 설정
spring:
  datasource:
    url: jdbc:mysql://db:3306/board_db?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=Asia/Seoul # docker-compose.yml의 서비스 이름과 일치해야 함 (컨테이너 간 통신용)
    username: root # MySQL 사용자 이름
    password: root # MySQL 비밀번호
    driver-class-name: com.mysql.cj.jdbc.Driver  # MySQL용 드라이버 클래스

  jpa:  # Java API -> DB CRUD 작업을 간편하게 해주는 API
    hibernate:
      ddl-auto: update # 개발 상태에서는 update (운영 시 validate 권장)
    show-sql: true # SQL 쿼리 로그 출력 여부
    properties:
      hibernate:
        format_sql: true # SQL 로그 예쁘게 출력
      jdbc:
        time_zone: Asia/Seoul
    database-platform: org.hibernate.dialect.MySQL8Dialect # MySQL을 사용한다고 명시해야 오류 방지

  # OAuth2 설정
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - email
              - profile
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            redirect-uri: http://localhost:8080/login/oauth2/code/kakao
            authorization-grant-type: authorization_code
            client-authentication-method: client_secret_post
            client-name: Kakao
            scope:
              - profile_nickname
              - profile_image
              - account_email
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            redirect-uri: http://localhost:8080/login/oauth2/code/naver
            authorization-grant-type: authorization_code
            scope:
              - name
              - email
              - profile_image
            client-name: Naver
        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

  servlet:
    multipart: #파일 업로드 설정
      max-file-size: 10MB # 파일 업로드 최대 크기 설정
      max-request-size: 10MB # 요청 전체 크기 제한

  jackson:
    time-zone: Asia/Seoul

  # Thymeleaf 설정
  thymeleaf:
    cache: false  # 개발 환경에서는 false로 설정하여 템플릿 자동 반영, 운영 환경에서는 true 권장

# 파일 업로드 경로 설정
file:
  upload-dir: /app/uploads  # Docker 컨테이너 내 업로드 경로

# Swagger UI 설정
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    disable-swagger-default-url: true
    display-request-duration: true
    tags-sorter: alpha
    operations-sorter: alpha

# 로그 레벨 설정
logging:
  level:
    org.springframework.web: INFO # Spring Web 관련 로그
    org.hibernate: WARN #
    com.example.board: WARN #
    org.springframework.security: DEBUG # Security 관련 로그 (개발 시 디버깅용)
#TRACE > DEBUG > INFO > WARN > ERROR  (Trace 가 가장 자세하게 나타냄) , 개발중엔 DEBUG 가 안정적